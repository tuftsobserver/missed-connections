@mixin e($element) {
    &__#{$element} {
        @content;
    }
}

@mixin m($modifier) {
    &--#{$modifier} {
        @content;
    }
}

@mixin bg-colors($map) {
    @each $theme,
    $color in $map {
        &--#{$theme} {
            background-color: $color;
        }
    }
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}

@mixin prefixed($property, $value) {
    -webkit-#{$property}: #{$value};
    -moz-#{$property}: #{$value};
    -ms-#{$property}: #{$value};
    -o-#{$property}: #{$value};
    #{$property}: #{$value};
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

@mixin linear-gradientV($top, $bottom) {
    background: $top;
    /* Old browsers */
    background: -webkit-linear-gradient(0deg, $top, $bottom);
    /* For Safari 5.1 to 6.0 */
    background: -o-linear-gradient(0deg, $top, $bottom);
    /* For Opera 11.1 to 12.0 */
    background: -moz-linear-gradient(0deg, $top, $bottom);
    /* For Firefox 3.6 to 15 */
    background: linear-gradient(0deg, $top, $bottom);
    /* Standard syntax */
    // filter: progid: DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000', GradientType=0);
    /* IE6-9 */
}

@mixin linear-gradientH($left, $right) {
    background: $left;
    /* For browsers that do not support gradients */
    background: -webkit-linear-gradient(-90deg, $left, $right);
    /* For Safari 5.1 to 6.0 */
    background: -o-linear-gradient(-90deg, $left, $right);
    /* For Opera 11.1 to 12.0 */
    background: -moz-linear-gradient(-90deg, $left, $right);
    /* For Firefox 3.6 to 15 */
    background: linear-gradient(-90deg, $left, $right);
    /* Standard syntax */
    // filter: progid: DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000', GradientType=0);
    /* IE6-9 */
}

@mixin box-shadow($top, $left, $blur, $spread, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur $spread $color;
        -moz-box-shadow: inset $top $left $blur $spread $color;
        box-shadow: inset $top $left $blur $spread $color;
    }
    @else {
        -webkit-box-shadow: $top $left $blur $spread $color;
        -moz-box-shadow: $top $left $blur $spread $color;
        box-shadow: $top $left $blur $spread $color;
    }
}

@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;
    $extmods: ( eot: "?", svg: "#" + str-replace($name, " ", "_"));
    $formats: ( otf: "opentype", ttf: "truetype");
    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }
    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}

// Media queries
@mixin mq($break) {
    @if $break=="small" {
        @media only screen and (min-width: $brkpoint-sm) and (max-width: $brkpoint-md), only screen and (min-device-width: $brkpoint-sm) and (max-device-width: $brkpoint-md) {
            @content;
        }
    }
    @else if $break=="medium" {
        @media only screen and (min-width: $brkpoint-md + 1) and (max-width: $brkpoint-lg - 1), only screen and (min-device-width: $brkpoint-md + 1) and (max-width: $brkpoint-lg - 1) {
            @content;
        }
    }
    @else if $break=="large" {
        @media only screen and (min-width: $brkpoint-lg), only screen and (min-device-width: $brkpoint-lg) {
            @content;
        }
    }
    @else {
        @error"Whoops! No value could be retrieved for `#{$break}`. ";
    }
}
